
Controller_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d5c  08002d5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  2000000c  08002d70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08002d70  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000684a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015f0  00000000  00000000  0002687f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00027e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  00028560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000147a9  00000000  00000000  00028b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005eef  00000000  00000000  0003d341  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ffa9  00000000  00000000  00043230  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c31d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b18  00000000  00000000  000c3254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002d18 	.word	0x08002d18

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002d18 	.word	0x08002d18

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	468c      	mov	ip, r1
 80001b2:	4604      	mov	r4, r0
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0c03 	orr.w	ip, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	fbbc f7fe 	udiv	r7, ip, lr
 80001e2:	fa1f f885 	uxth.w	r8, r5
 80001e6:	fb0e c317 	mls	r3, lr, r7, ip
 80001ea:	fb07 f908 	mul.w	r9, r7, r8
 80001ee:	0c21      	lsrs	r1, r4, #16
 80001f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f4:	4599      	cmp	r9, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80001fe:	f080 811c 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000202:	4599      	cmp	r9, r3
 8000204:	f240 8119 	bls.w	800043a <__udivmoddi4+0x28e>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	eba3 0309 	sub.w	r3, r3, r9
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	fb00 f108 	mul.w	r1, r0, r8
 800021c:	b2a4      	uxth	r4, r4
 800021e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000222:	42a1      	cmp	r1, r4
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	192c      	adds	r4, r5, r4
 8000228:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800022c:	f080 8107 	bcs.w	800043e <__udivmoddi4+0x292>
 8000230:	42a1      	cmp	r1, r4
 8000232:	f240 8104 	bls.w	800043e <__udivmoddi4+0x292>
 8000236:	3802      	subs	r0, #2
 8000238:	442c      	add	r4, r5
 800023a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023e:	2700      	movs	r7, #0
 8000240:	1a64      	subs	r4, r4, r1
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	2300      	movs	r3, #0
 8000246:	40d4      	lsrs	r4, r2
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ec 	beq.w	8000434 <__udivmoddi4+0x288>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0x158>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fb 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	469c      	mov	ip, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4c00 	strd	r4, ip, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	2701      	movs	r7, #1
 80002a0:	1b49      	subs	r1, r1, r5
 80002a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002a6:	fa1f f985 	uxth.w	r9, r5
 80002aa:	fbb1 fef8 	udiv	lr, r1, r8
 80002ae:	fb08 111e 	mls	r1, r8, lr, r1
 80002b2:	fb09 f00e 	mul.w	r0, r9, lr
 80002b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80002ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002be:	4298      	cmp	r0, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c2:	18eb      	adds	r3, r5, r3
 80002c4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4298      	cmp	r0, r3
 80002cc:	f200 80cd 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002d0:	468e      	mov	lr, r1
 80002d2:	1a1b      	subs	r3, r3, r0
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	fb09 f900 	mul.w	r9, r9, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e6:	45a1      	cmp	r9, r4
 80002e8:	d907      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002ea:	192c      	adds	r4, r5, r4
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a1      	cmp	r9, r4
 80002f4:	f200 80b6 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002f8:	4618      	mov	r0, r3
 80002fa:	eba4 0409 	sub.w	r4, r4, r9
 80002fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000302:	e79e      	b.n	8000242 <__udivmoddi4+0x96>
 8000304:	f1c7 0520 	rsb	r5, r7, #32
 8000308:	40bb      	lsls	r3, r7
 800030a:	fa22 fc05 	lsr.w	ip, r2, r5
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa21 f405 	lsr.w	r4, r1, r5
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fbb4 f9fe 	udiv	r9, r4, lr
 800031e:	fa1f f88c 	uxth.w	r8, ip
 8000322:	fb0e 4419 	mls	r4, lr, r9, r4
 8000326:	fa20 f305 	lsr.w	r3, r0, r5
 800032a:	40b9      	lsls	r1, r7
 800032c:	fb09 fa08 	mul.w	sl, r9, r8
 8000330:	4319      	orrs	r1, r3
 8000332:	0c0b      	lsrs	r3, r1, #16
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	45a2      	cmp	sl, r4
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f307 	lsl.w	r3, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	45a2      	cmp	sl, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4464      	add	r4, ip
 800035c:	eba4 040a 	sub.w	r4, r4, sl
 8000360:	fbb4 f0fe 	udiv	r0, r4, lr
 8000364:	fb0e 4410 	mls	r4, lr, r0, r4
 8000368:	fb00 fa08 	mul.w	sl, r0, r8
 800036c:	b289      	uxth	r1, r1
 800036e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000372:	45a2      	cmp	sl, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800037e:	d26b      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 8000380:	45a2      	cmp	sl, r4
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000384:	3802      	subs	r0, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038c:	fba0 8902 	umull	r8, r9, r0, r2
 8000390:	eba4 040a 	sub.w	r4, r4, sl
 8000394:	454c      	cmp	r4, r9
 8000396:	4641      	mov	r1, r8
 8000398:	46ce      	mov	lr, r9
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d069      	beq.n	8000476 <__udivmoddi4+0x2ca>
 80003a2:	1a5a      	subs	r2, r3, r1
 80003a4:	eb64 040e 	sbc.w	r4, r4, lr
 80003a8:	fa04 f505 	lsl.w	r5, r4, r5
 80003ac:	fa22 f307 	lsr.w	r3, r2, r7
 80003b0:	40fc      	lsrs	r4, r7
 80003b2:	431d      	orrs	r5, r3
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	4095      	lsls	r5, r2
 80003be:	f1c2 0320 	rsb	r3, r2, #32
 80003c2:	fa21 f003 	lsr.w	r0, r1, r3
 80003c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80003ce:	fa1f f985 	uxth.w	r9, r5
 80003d2:	fb08 0017 	mls	r0, r8, r7, r0
 80003d6:	fa24 f303 	lsr.w	r3, r4, r3
 80003da:	4091      	lsls	r1, r2
 80003dc:	fb07 fc09 	mul.w	ip, r7, r9
 80003e0:	430b      	orrs	r3, r1
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e8:	458c      	cmp	ip, r1
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x254>
 80003f0:	1869      	adds	r1, r5, r1
 80003f2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80003f6:	d231      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003f8:	458c      	cmp	ip, r1
 80003fa:	d92f      	bls.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	3f02      	subs	r7, #2
 80003fe:	4429      	add	r1, r5
 8000400:	eba1 010c 	sub.w	r1, r1, ip
 8000404:	fbb1 f0f8 	udiv	r0, r1, r8
 8000408:	fb08 1c10 	mls	ip, r8, r0, r1
 800040c:	fb00 fe09 	mul.w	lr, r0, r9
 8000410:	b299      	uxth	r1, r3
 8000412:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000416:	458e      	cmp	lr, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000420:	d218      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000422:	458e      	cmp	lr, r1
 8000424:	d916      	bls.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4637      	mov	r7, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e708      	b.n	800024c <__udivmoddi4+0xa0>
 800043a:	460f      	mov	r7, r1
 800043c:	e6e6      	b.n	800020c <__udivmoddi4+0x60>
 800043e:	4618      	mov	r0, r3
 8000440:	e6fb      	b.n	800023a <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb8 0102 	subs.w	r1, r8, r2
 800044a:	eb69 020c 	sbc.w	r2, r9, ip
 800044e:	3801      	subs	r0, #1
 8000450:	4696      	mov	lr, r2
 8000452:	e7a4      	b.n	800039e <__udivmoddi4+0x1f2>
 8000454:	4618      	mov	r0, r3
 8000456:	e7e8      	b.n	800042a <__udivmoddi4+0x27e>
 8000458:	4608      	mov	r0, r1
 800045a:	e795      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045c:	4607      	mov	r7, r0
 800045e:	e7cf      	b.n	8000400 <__udivmoddi4+0x254>
 8000460:	4681      	mov	r9, r0
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3802      	subs	r0, #2
 8000466:	442c      	add	r4, r5
 8000468:	e747      	b.n	80002fa <__udivmoddi4+0x14e>
 800046a:	f1ae 0e02 	sub.w	lr, lr, #2
 800046e:	442b      	add	r3, r5
 8000470:	e72f      	b.n	80002d2 <__udivmoddi4+0x126>
 8000472:	4638      	mov	r0, r7
 8000474:	e707      	b.n	8000286 <__udivmoddi4+0xda>
 8000476:	4637      	mov	r7, r6
 8000478:	e6e8      	b.n	800024c <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fe73 	bl	8001172 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f8aa 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f948 	bl	8000724 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000494:	f000 f8f2 	bl	800067c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000498:	f000 f91a 	bl	80006d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  init_configuration();
 800049c:	f000 f980 	bl	80007a0 <init_configuration>

  header_t header;
  body_t body;
  uint8_t err = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (curr_state) {
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <main+0x144>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b05      	cmp	r3, #5
 80004ac:	d856      	bhi.n	800055c <main+0xdc>
 80004ae:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <main+0x34>)
 80004b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b4:	0800055d 	.word	0x0800055d
 80004b8:	080004cd 	.word	0x080004cd
 80004bc:	08000515 	.word	0x08000515
 80004c0:	080004f3 	.word	0x080004f3
 80004c4:	080004f3 	.word	0x080004f3
 80004c8:	0800055d 	.word	0x0800055d
	  case Idle_State:
		  break;

	  case Read_Header_State:
		  err = parse_header((uint8_t *)&up_buffer, &header);
 80004cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80004d0:	4619      	mov	r1, r3
 80004d2:	483d      	ldr	r0, [pc, #244]	; (80005c8 <main+0x148>)
 80004d4:	f000 f99a 	bl	800080c <parse_header>
 80004d8:	4603      	mov	r3, r0
 80004da:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		  next_state = header_handler(&header);
 80004de:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fb9c 	bl	8000c20 <header_handler>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b37      	ldr	r3, [pc, #220]	; (80005cc <main+0x14c>)
 80004ee:	701a      	strb	r2, [r3, #0]
		  break;
 80004f0:	e035      	b.n	800055e <main+0xde>

	  case Read_Region_State:
	  case Read_Sensors_State:
		  err = parse_body((uint8_t *)&up_buffer, &body);
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4619      	mov	r1, r3
 80004f6:	4834      	ldr	r0, [pc, #208]	; (80005c8 <main+0x148>)
 80004f8:	f000 f9e1 	bl	80008be <parse_body>
 80004fc:	4603      	mov	r3, r0
 80004fe:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
		  next_state = body_handler(&body);
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fcc1 	bl	8000e8c <body_handler>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <main+0x14c>)
 8000510:	701a      	strb	r2, [r3, #0]
		  break;
 8000512:	e024      	b.n	800055e <main+0xde>

	  case Transport_State:
		  transmit_buffer((uint8_t *)&down_buffer, num_bytes_down);
 8000514:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <main+0x150>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	482e      	ldr	r0, [pc, #184]	; (80005d4 <main+0x154>)
 800051c:	f000 f956 	bl	80007cc <transmit_buffer>

		  // ACK received. Prepare to receive body from down
		  if (num_bytes_down == 15 && waiting_read_down == 1) {
 8000520:	4b2b      	ldr	r3, [pc, #172]	; (80005d0 <main+0x150>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	2b0f      	cmp	r3, #15
 8000526:	d10d      	bne.n	8000544 <main+0xc4>
 8000528:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <main+0x158>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d109      	bne.n	8000544 <main+0xc4>
			  num_bytes_down = 0;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <main+0x150>)
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Receive_IT(&huart3, (uint8_t *)&down_buffer, MAX_BUFFER_SIZE);
 8000536:	f44f 7204 	mov.w	r2, #528	; 0x210
 800053a:	4926      	ldr	r1, [pc, #152]	; (80005d4 <main+0x154>)
 800053c:	4827      	ldr	r0, [pc, #156]	; (80005dc <main+0x15c>)
 800053e:	f002 f803 	bl	8002548 <HAL_UART_Receive_IT>
 8000542:	e007      	b.n	8000554 <main+0xd4>
		  } else {
			  // Prepare to received a header
			  num_bytes_down = 0;
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <main+0x150>)
 8000546:	2200      	movs	r2, #0
 8000548:	801a      	strh	r2, [r3, #0]
			  HAL_UART_Receive_IT(&huart3, (uint8_t *)&down_buffer, 15);
 800054a:	220f      	movs	r2, #15
 800054c:	4921      	ldr	r1, [pc, #132]	; (80005d4 <main+0x154>)
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <main+0x15c>)
 8000550:	f001 fffa 	bl	8002548 <HAL_UART_Receive_IT>
		  }

		  next_state = Idle_State;
 8000554:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <main+0x14c>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
		  break;
 800055a:	e000      	b.n	800055e <main+0xde>

	  case Execute_Code_State:
		  break;
	  default:
		  break;
 800055c:	bf00      	nop
	  /// Each slave makes use of two USARTs, being those 1 and 3
	  ///   USART1 will be used to receive data
	  ///   USART3 will be used to transmit data
	  ///
	  /// The package should go up the chain without any type of intervention
	  if (num_bytes_up == 15) {
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <main+0x160>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b0f      	cmp	r3, #15
 8000564:	d106      	bne.n	8000574 <main+0xf4>
		  	num_bytes_up = 0;
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <main+0x160>)
 8000568:	2200      	movs	r2, #0
 800056a:	801a      	strh	r2, [r3, #0]
	  		next_state = Read_Header_State;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0x14c>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	e022      	b.n	80005ba <main+0x13a>
	  } else if (num_bytes_up == MAX_BUFFER_SIZE) {
 8000574:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <main+0x160>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800057c:	d106      	bne.n	800058c <main+0x10c>
		  num_bytes_up = 0;
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <main+0x160>)
 8000580:	2200      	movs	r2, #0
 8000582:	801a      	strh	r2, [r3, #0]
		  next_state = Read_Region_State;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <main+0x14c>)
 8000586:	2203      	movs	r2, #3
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e016      	b.n	80005ba <main+0x13a>
	  } else if(waiting_read_down == 1 && num_bytes_down == MAX_BUFFER_SIZE) {
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <main+0x158>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d10b      	bne.n	80005ac <main+0x12c>
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <main+0x150>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800059c:	d106      	bne.n	80005ac <main+0x12c>
		  waiting_read_down = 0;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <main+0x158>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	801a      	strh	r2, [r3, #0]
		  next_state = Transport_State;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <main+0x14c>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	e006      	b.n	80005ba <main+0x13a>
	  } else if (num_bytes_down == 15) {
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0x150>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d102      	bne.n	80005ba <main+0x13a>
	  		next_state = Transport_State;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <main+0x14c>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	701a      	strb	r2, [r3, #0]
	  }
	  curr_state = next_state;
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <main+0x14c>)
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <main+0x144>)
 80005c0:	701a      	strb	r2, [r3, #0]
	  switch (curr_state) {
 80005c2:	e770      	b.n	80004a6 <main+0x26>
 80005c4:	20000028 	.word	0x20000028
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	20000494 	.word	0x20000494
 80005d0:	2000044e 	.word	0x2000044e
 80005d4:	2000023c 	.word	0x2000023c
 80005d8:	20000450 	.word	0x20000450
 80005dc:	20000454 	.word	0x20000454
 80005e0:	2000044c 	.word	0x2000044c

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b092      	sub	sp, #72	; 0x48
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fb88 	bl	8002d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <SystemClock_Config+0x94>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800060e:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <SystemClock_Config+0x94>)
 8000610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000614:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2310      	movs	r3, #16
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2300      	movs	r3, #0
 8000628:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800062a:	2300      	movs	r3, #0
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f907 	bl	800184c <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000644:	f000 f8a8 	bl	8000798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2303      	movs	r3, #3
 800064e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fc23 	bl	8001eac <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800066c:	f000 f894 	bl	8000798 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3748      	adds	r7, #72	; 0x48
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART1_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f001 fe62 	bl	800237c <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f86b 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000498 	.word	0x20000498
 80006cc:	40013800 	.word	0x40013800

080006d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART3_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART3_UART_Init+0x4c>)
 8000708:	f001 fe38 	bl	800237c <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f841 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000454 	.word	0x20000454
 8000720:	40004800 	.word	0x40004800

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_GPIO_Init+0x70>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <MX_GPIO_Init+0x70>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_GPIO_Init+0x70>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_GPIO_Init+0x70>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_GPIO_Init+0x70>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_GPIO_Init+0x70>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_GPIO_Init+0x70>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <MX_GPIO_Init+0x70>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_GPIO_Init+0x70>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_GPIO_Init+0x70>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <MX_GPIO_Init+0x70>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MX_GPIO_Init+0x70>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40023800 	.word	0x40023800

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079e:	e7fe      	b.n	800079e <Error_Handler+0x6>

080007a0 <init_configuration>:
uint8_t write_mem_en = 0;


/// Initial peripheral configuration
void init_configuration(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&up_buffer, 15);
 80007a4:	220f      	movs	r2, #15
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <init_configuration+0x1c>)
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <init_configuration+0x20>)
 80007aa:	f001 fecd 	bl	8002548 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&down_buffer, 15);
 80007ae:	220f      	movs	r2, #15
 80007b0:	4904      	ldr	r1, [pc, #16]	; (80007c4 <init_configuration+0x24>)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <init_configuration+0x28>)
 80007b4:	f001 fec8 	bl	8002548 <HAL_UART_Receive_IT>

//	__HAL_ADC_ENABLE(&hadc);
//	HAL_ADC_Start(&hadc);
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	20000498 	.word	0x20000498
 80007c4:	2000023c 	.word	0x2000023c
 80007c8:	20000454 	.word	0x20000454

080007cc <transmit_buffer>:


void transmit_buffer(uint8_t *buffer, uint16_t num_bytes)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
	for(int i = 0; i < num_bytes; ++i) {
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e00b      	b.n	80007f6 <transmit_buffer+0x2a>
		HAL_UART_Transmit(&huart1, (buffer + i), 1, TIMEOUT_TX);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	18d1      	adds	r1, r2, r3
 80007e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007e8:	2201      	movs	r2, #1
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <transmit_buffer+0x3c>)
 80007ec:	f001 fe13 	bl	8002416 <HAL_UART_Transmit>
	for(int i = 0; i < num_bytes; ++i) {
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	dbef      	blt.n	80007de <transmit_buffer+0x12>
	}
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000498 	.word	0x20000498

0800080c <parse_header>:

/// Parse a header from the received bytes
uint8_t parse_header(uint8_t *usart_buffer, header_t *header)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
	header->type = usart_buffer[0];
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	701a      	strb	r2, [r3, #0]
	header->ttl = usart_buffer[1];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	785a      	ldrb	r2, [r3, #1]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	705a      	strb	r2, [r3, #1]
	header->crc = usart_buffer[2];
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	789a      	ldrb	r2, [r3, #2]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	709a      	strb	r2, [r3, #2]

	header->bid_high = (usart_buffer[6] << 24) + (usart_buffer[5] << 16) + (usart_buffer[4] << 8) + (usart_buffer[3]);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3306      	adds	r3, #6
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	061a      	lsls	r2, r3, #24
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3305      	adds	r3, #5
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	041b      	lsls	r3, r3, #16
 800083e:	441a      	add	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3304      	adds	r3, #4
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	4413      	add	r3, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	3203      	adds	r2, #3
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	4413      	add	r3, r2
 8000852:	461a      	mov	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	f8c3 2003 	str.w	r2, [r3, #3]
	header->bid_medium = (usart_buffer[10] << 24) + (usart_buffer[9] << 16) + (usart_buffer[8] << 8) + (usart_buffer[7]);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	330a      	adds	r3, #10
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	061a      	lsls	r2, r3, #24
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3309      	adds	r3, #9
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	041b      	lsls	r3, r3, #16
 800086a:	441a      	add	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3308      	adds	r3, #8
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	4413      	add	r3, r2
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	3207      	adds	r2, #7
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	4413      	add	r3, r2
 800087e:	461a      	mov	r2, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f8c3 2007 	str.w	r2, [r3, #7]
	header->bid_low = (usart_buffer[14] << 24) + (usart_buffer[13] << 16) + (usart_buffer[12] << 8) + (usart_buffer[11]);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	330e      	adds	r3, #14
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	061a      	lsls	r2, r3, #24
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	330d      	adds	r3, #13
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	041b      	lsls	r3, r3, #16
 8000896:	441a      	add	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	330c      	adds	r3, #12
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	4413      	add	r3, r2
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	320b      	adds	r2, #11
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	461a      	mov	r2, r3
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	f8c3 200b 	str.w	r2, [r3, #11]

	return 1;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <parse_body>:

uint8_t parse_body(uint8_t *buffer, body_t *body) {
 80008be:	b480      	push	{r7}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]

	body->type = buffer[0];
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	701a      	strb	r2, [r3, #0]
	body->crc = buffer[1];
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	785a      	ldrb	r2, [r3, #1]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	705a      	strb	r2, [r3, #1]

	body->bid_high = (buffer[5] << 24) + (buffer[4] << 16) + (buffer[3] << 8) + (buffer[2]);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3305      	adds	r3, #5
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	061a      	lsls	r2, r3, #24
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3304      	adds	r3, #4
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	041b      	lsls	r3, r3, #16
 80008e8:	441a      	add	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3303      	adds	r3, #3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	4413      	add	r3, r2
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	3202      	adds	r2, #2
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	605a      	str	r2, [r3, #4]
	body->bid_medium = (buffer[9] << 24) + (buffer[8] << 16) + (buffer[7] << 8) + (buffer[6]);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3309      	adds	r3, #9
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	061a      	lsls	r2, r3, #24
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3308      	adds	r3, #8
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	041b      	lsls	r3, r3, #16
 8000912:	441a      	add	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3307      	adds	r3, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	4413      	add	r3, r2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	3206      	adds	r2, #6
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	4413      	add	r3, r2
 8000926:	461a      	mov	r2, r3
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	609a      	str	r2, [r3, #8]
	body->bid_low = (buffer[13] << 24) + (buffer[12] << 16) + (buffer[11] << 8) + (buffer[10]);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	330d      	adds	r3, #13
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	061a      	lsls	r2, r3, #24
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	330c      	adds	r3, #12
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	441a      	add	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	330b      	adds	r3, #11
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	4413      	add	r3, r2
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	320a      	adds	r2, #10
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	4413      	add	r3, r2
 8000950:	461a      	mov	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	60da      	str	r2, [r3, #12]

	switch (body->type) {
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b07      	cmp	r3, #7
 800095c:	d028      	beq.n	80009b0 <parse_body+0xf2>
 800095e:	2b08      	cmp	r3, #8
 8000960:	d028      	beq.n	80009b4 <parse_body+0xf6>
 8000962:	2b06      	cmp	r3, #6
 8000964:	d127      	bne.n	80009b6 <parse_body+0xf8>
	case MEMORY:
                body->mem_address = (buffer[15] << 8) + (buffer[14]);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	330f      	adds	r3, #15
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b29b      	uxth	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b29a      	uxth	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	330e      	adds	r3, #14
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b29b      	uxth	r3, r3
 800097a:	4413      	add	r3, r2
 800097c:	b29a      	uxth	r2, r3
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	821a      	strh	r2, [r3, #16]

                for(int i = 0; i < 512; ++i) {
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	e00e      	b.n	80009a6 <parse_body+0xe8>
                        body->data[i] = buffer[16 + i];
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3310      	adds	r3, #16
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	7819      	ldrb	r1, [r3, #0]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	3312      	adds	r3, #18
 800099c:	460a      	mov	r2, r1
 800099e:	701a      	strb	r2, [r3, #0]
                for(int i = 0; i < 512; ++i) {
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009ac:	dbec      	blt.n	8000988 <parse_body+0xca>
                }
		break;
 80009ae:	e002      	b.n	80009b6 <parse_body+0xf8>
	case SENSORS:
		break;
 80009b0:	bf00      	nop
 80009b2:	e000      	b.n	80009b6 <parse_body+0xf8>
	case CODE:
		break;
 80009b4:	bf00      	nop
	}

	return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
	...

080009c4 <get_bid_high>:
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)0x0803CCCC, 0xabcdef98);

	HAL_FLASH_Lock();
}

uint32_t get_bid_high() {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
	uint8_t *uid_p = (uint8_t *)0x1FF800D0;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <get_bid_high+0x38>)
 80009cc:	607b      	str	r3, [r7, #4]

	return ((uint8_t)*(uid_p)<< 24) + ((uint8_t)*(uid_p + 1) << 16) + ((uint8_t)*(uid_p + 2) << 8) + ((uint8_t)*(uid_p + 3));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	061a      	lsls	r2, r3, #24
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	041b      	lsls	r3, r3, #16
 80009dc:	441a      	add	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3302      	adds	r3, #2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	4413      	add	r3, r2
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	3203      	adds	r2, #3
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	4413      	add	r3, r2
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	1ff800d0 	.word	0x1ff800d0

08000a00 <get_bid_medium>:

uint32_t get_bid_medium() {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
	uint8_t *uid_p = (uint8_t *)0x1FF800D0;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <get_bid_medium+0x38>)
 8000a08:	607b      	str	r3, [r7, #4]

	return ((uint8_t)*(uid_p + 4)<< 24) + ((uint8_t)*(uid_p + 5) << 16) + ((uint8_t)*(uid_p + 6) << 8) + ((uint8_t)*(uid_p + 7));
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	061a      	lsls	r2, r3, #24
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3305      	adds	r3, #5
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	041b      	lsls	r3, r3, #16
 8000a1a:	441a      	add	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3306      	adds	r3, #6
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	021b      	lsls	r3, r3, #8
 8000a24:	4413      	add	r3, r2
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	3207      	adds	r2, #7
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	4413      	add	r3, r2
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	1ff800d0 	.word	0x1ff800d0

08000a3c <get_bid_low>:

uint32_t get_bid_low() {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
	uint8_t *uid_p = (uint8_t *)0x1FF800e3;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <get_bid_low+0x38>)
 8000a44:	607b      	str	r3, [r7, #4]

	return ((uint8_t)*(uid_p)<< 24) + ((uint8_t)*(uid_p + 1) << 16) + ((uint8_t)*(uid_p + 2) << 8) + ((uint8_t)*(uid_p + 3));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	061a      	lsls	r2, r3, #24
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	041b      	lsls	r3, r3, #16
 8000a54:	441a      	add	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	021b      	lsls	r3, r3, #8
 8000a5e:	4413      	add	r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	3203      	adds	r2, #3
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	4413      	add	r3, r2
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	1ff800e3 	.word	0x1ff800e3

08000a78 <transmit_header>:

void transmit_header(UART_HandleTypeDef *huart, header_t *header) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
        HAL_UART_Transmit(huart, (uint8_t *)&header->type, 1, TIMEOUT_TX);
 8000a82:	6839      	ldr	r1, [r7, #0]
 8000a84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a88:	2201      	movs	r2, #1
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f001 fcc3 	bl	8002416 <HAL_UART_Transmit>
        HAL_UART_Transmit(huart, (uint8_t *)&header->ttl, 1, TIMEOUT_TX);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	1c59      	adds	r1, r3, #1
 8000a94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a98:	2201      	movs	r2, #1
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f001 fcbb 	bl	8002416 <HAL_UART_Transmit>

        HAL_UART_Transmit(huart, (uint8_t *)&header->crc, 1, TIMEOUT_TX);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	1c99      	adds	r1, r3, #2
 8000aa4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f001 fcb3 	bl	8002416 <HAL_UART_Transmit>

        HAL_UART_Transmit(huart, (uint8_t *)&header->bid_high, 4, TIMEOUT_TX);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	1cd9      	adds	r1, r3, #3
 8000ab4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ab8:	2204      	movs	r2, #4
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f001 fcab 	bl	8002416 <HAL_UART_Transmit>
        HAL_UART_Transmit(huart, (uint8_t *)&header->bid_medium, 4, TIMEOUT_TX);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	1dd9      	adds	r1, r3, #7
 8000ac4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ac8:	2204      	movs	r2, #4
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f001 fca3 	bl	8002416 <HAL_UART_Transmit>
        HAL_UART_Transmit(huart, (uint8_t *)&header->bid_low, 4, TIMEOUT_TX);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f103 010b 	add.w	r1, r3, #11
 8000ad6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ada:	2204      	movs	r2, #4
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f001 fc9a 	bl	8002416 <HAL_UART_Transmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <transmit_body>:

void transmit_body(UART_HandleTypeDef *huart, body_t *body) {
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
	// Read body to check which regions of memory to read
	// Send header to inform master of the read data
	HAL_UART_Transmit(huart, (uint8_t *)&body->type, 1, TIMEOUT_TX);
 8000af4:	6839      	ldr	r1, [r7, #0]
 8000af6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000afa:	2201      	movs	r2, #1
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f001 fc8a 	bl	8002416 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t *)&body->crc, 1, TIMEOUT_TX);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	1c59      	adds	r1, r3, #1
 8000b06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f001 fc82 	bl	8002416 <HAL_UART_Transmit>

	HAL_UART_Transmit(huart, (uint8_t *)&body->bid_high, 4, TIMEOUT_TX);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	1d19      	adds	r1, r3, #4
 8000b16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f001 fc7a 	bl	8002416 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t *)&body->bid_medium, 4, TIMEOUT_TX);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	f103 0108 	add.w	r1, r3, #8
 8000b28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f001 fc71 	bl	8002416 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t *)&body->bid_low, 4, TIMEOUT_TX);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f103 010c 	add.w	r1, r3, #12
 8000b3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b3e:	2204      	movs	r2, #4
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f001 fc68 	bl	8002416 <HAL_UART_Transmit>

	HAL_UART_Transmit(huart, (uint8_t *)&body->mem_address, 2, TIMEOUT_TX);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	f103 0110 	add.w	r1, r3, #16
 8000b4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b50:	2202      	movs	r2, #2
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f001 fc5f 	bl	8002416 <HAL_UART_Transmit>

	uint8_t *mem = (uint8_t *)0x20000000;
 8000b58:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b5c:	613b      	str	r3, [r7, #16]
	uint32_t address = body->mem_address * 512;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	8a1b      	ldrh	r3, [r3, #16]
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	60fb      	str	r3, [r7, #12]

	switch(body->type) {
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	d01a      	beq.n	8000ba4 <transmit_body+0xba>
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d01a      	beq.n	8000ba8 <transmit_body+0xbe>
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d000      	beq.n	8000b78 <transmit_body+0x8e>
//
//	uint32_t temp = adc_values[0];
//	uint32_t vdd = adc_values[1];

//	HAL_ADC_Stop_DMA(&hadc);
}
 8000b76:	e018      	b.n	8000baa <transmit_body+0xc0>
			for(int i = 0; i < 512; i++) {
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e00d      	b.n	8000b9a <transmit_body+0xb0>
				HAL_UART_Transmit(huart, (uint8_t *)(mem + address + i), 1, TIMEOUT_TX);
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	18d1      	adds	r1, r2, r3
 8000b88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f001 fc41 	bl	8002416 <HAL_UART_Transmit>
			for(int i = 0; i < 512; i++) {
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ba0:	dbed      	blt.n	8000b7e <transmit_body+0x94>
			break;
 8000ba2:	e002      	b.n	8000baa <transmit_body+0xc0>
			break;
 8000ba4:	bf00      	nop
 8000ba6:	e000      	b.n	8000baa <transmit_body+0xc0>
			break;
 8000ba8:	bf00      	nop
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <write_mem_values>:

/// Write the values to memory
void write_mem_values(body_t *body) {
 8000bb2:	b480      	push	{r7}
 8000bb4:	b087      	sub	sp, #28
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]

        uint8_t *mem = (uint8_t *)0x20000000;
 8000bba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bbe:	613b      	str	r3, [r7, #16]
        uint32_t address = body->mem_address * 512;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	8a1b      	ldrh	r3, [r3, #16]
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	60fb      	str	r3, [r7, #12]

        for(int i = 0; i < 512; i++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e00d      	b.n	8000bea <write_mem_values+0x38>
                *(mem + address + i) = body->data[i];
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	440a      	add	r2, r1
 8000bde:	3212      	adds	r2, #18
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 512; i++) {
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf0:	dbed      	blt.n	8000bce <write_mem_values+0x1c>
        }
}
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <transmit_ACK>:


void transmit_ACK(header_t *header) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	header->type = ACK;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
	transmit_header(&huart1, header);
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <transmit_ACK+0x20>)
 8000c0e:	f7ff ff33 	bl	8000a78 <transmit_header>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000498 	.word	0x20000498

08000c20 <header_handler>:

///
/// Choose appropriate state depending on header type
///
/// If there is an error, return to Idle_State
SystemState header_handler(header_t *header) {
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	switch(header->type){
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	f200 8117 	bhi.w	8000e62 <header_handler+0x242>
 8000c34:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <header_handler+0x1c>)
 8000c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3a:	bf00      	nop
 8000c3c:	08000c51 	.word	0x08000c51
 8000c40:	08000c55 	.word	0x08000c55
 8000c44:	08000d5b 	.word	0x08000d5b
 8000c48:	08000ddd 	.word	0x08000ddd
 8000c4c:	08000e5f 	.word	0x08000e5f
	case ACK:
		// ACKs can only be sent up the chain
		return Idle_State;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e107      	b.n	8000e64 <header_handler+0x244>
		break;

	case PING:
		header->ttl += 1;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	785b      	ldrb	r3, [r3, #1]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	705a      	strb	r2, [r3, #1]

		if (header->bid_high == 0 && header->bid_medium == 0 && header->bid_low == 0) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d145      	bne.n	8000cf6 <header_handler+0xd6>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d140      	bne.n	8000cf6 <header_handler+0xd6>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d13b      	bne.n	8000cf6 <header_handler+0xd6>

	    	// Send ACK up the chain
			header->bid_high = get_bid_high();
 8000c7e:	f7ff fea1 	bl	80009c4 <get_bid_high>
 8000c82:	4602      	mov	r2, r0
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f8c3 2003 	str.w	r2, [r3, #3]
			header->bid_medium = get_bid_medium();
 8000c8a:	f7ff feb9 	bl	8000a00 <get_bid_medium>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f8c3 2007 	str.w	r2, [r3, #7]
			header->bid_low = get_bid_low();
 8000c96:	f7ff fed1 	bl	8000a3c <get_bid_low>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8c3 200b 	str.w	r2, [r3, #11]
	    	transmit_ACK(header);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffaa 	bl	8000bfc <transmit_ACK>

	    	HAL_Delay(1000);
 8000ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cac:	f000 fad0 	bl	8001250 <HAL_Delay>

	    	header->type = PING;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	701a      	strb	r2, [r3, #0]
	    	header->bid_high = 0;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	70da      	strb	r2, [r3, #3]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	711a      	strb	r2, [r3, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	715a      	strb	r2, [r3, #5]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	719a      	strb	r2, [r3, #6]
	    	header->bid_medium = 0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	71da      	strb	r2, [r3, #7]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	721a      	strb	r2, [r3, #8]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	725a      	strb	r2, [r3, #9]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	729a      	strb	r2, [r3, #10]
	    	header->bid_low = 0;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	72da      	strb	r2, [r3, #11]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	731a      	strb	r2, [r3, #12]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	735a      	strb	r2, [r3, #13]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	739a      	strb	r2, [r3, #14]

	    	// Transport PING packet down the chain
	    	transmit_header(&huart3, header);
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	485f      	ldr	r0, [pc, #380]	; (8000e6c <header_handler+0x24c>)
 8000cf0:	f7ff fec2 	bl	8000a78 <transmit_header>
 8000cf4:	e01f      	b.n	8000d36 <header_handler+0x116>

		} else if(header->bid_high == get_bid_high() && header->bid_medium == get_bid_medium() && header->bid_low == get_bid_low() ) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f8d3 4003 	ldr.w	r4, [r3, #3]
 8000cfc:	f7ff fe62 	bl	80009c4 <get_bid_high>
 8000d00:	4603      	mov	r3, r0
 8000d02:	429c      	cmp	r4, r3
 8000d04:	d113      	bne.n	8000d2e <header_handler+0x10e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f8d3 4007 	ldr.w	r4, [r3, #7]
 8000d0c:	f7ff fe78 	bl	8000a00 <get_bid_medium>
 8000d10:	4603      	mov	r3, r0
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d10b      	bne.n	8000d2e <header_handler+0x10e>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f8d3 400b 	ldr.w	r4, [r3, #11]
 8000d1c:	f7ff fe8e 	bl	8000a3c <get_bid_low>
 8000d20:	4603      	mov	r3, r0
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d103      	bne.n	8000d2e <header_handler+0x10e>
//			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
	    	transmit_ACK(header);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff68 	bl	8000bfc <transmit_ACK>
 8000d2c:	e003      	b.n	8000d36 <header_handler+0x116>
	    } else {
	    	// Transport PING packet
	    	transmit_header(&huart3, header);
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	484e      	ldr	r0, [pc, #312]	; (8000e6c <header_handler+0x24c>)
 8000d32:	f7ff fea1 	bl	8000a78 <transmit_header>
	    }

		num_bytes_up = 0;
 8000d36:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <header_handler+0x250>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&up_buffer, 15);
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	494d      	ldr	r1, [pc, #308]	; (8000e74 <header_handler+0x254>)
 8000d40:	484d      	ldr	r0, [pc, #308]	; (8000e78 <header_handler+0x258>)
 8000d42:	f001 fc01 	bl	8002548 <HAL_UART_Receive_IT>

		num_bytes_down = 0;
 8000d46:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <header_handler+0x25c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t *)&down_buffer, 15);
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	494c      	ldr	r1, [pc, #304]	; (8000e80 <header_handler+0x260>)
 8000d50:	4846      	ldr	r0, [pc, #280]	; (8000e6c <header_handler+0x24c>)
 8000d52:	f001 fbf9 	bl	8002548 <HAL_UART_Receive_IT>

		return Idle_State;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e084      	b.n	8000e64 <header_handler+0x244>

		break;

	case READ:
		// Wait to receive body
		write_mem_en = 0;
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <header_handler+0x264>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
		num_bytes_up = 0;
 8000d60:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <header_handler+0x250>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&up_buffer, MAX_BUFFER_SIZE);
 8000d66:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000d6a:	4942      	ldr	r1, [pc, #264]	; (8000e74 <header_handler+0x254>)
 8000d6c:	4842      	ldr	r0, [pc, #264]	; (8000e78 <header_handler+0x258>)
 8000d6e:	f001 fbeb 	bl	8002548 <HAL_UART_Receive_IT>

		// Reply to packet
		if(header->bid_high == get_bid_high() && header->bid_medium == get_bid_medium() && header->bid_low == get_bid_low() ) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8d3 4003 	ldr.w	r4, [r3, #3]
 8000d78:	f7ff fe24 	bl	80009c4 <get_bid_high>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	429c      	cmp	r4, r3
 8000d80:	d11b      	bne.n	8000dba <header_handler+0x19a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f8d3 4007 	ldr.w	r4, [r3, #7]
 8000d88:	f7ff fe3a 	bl	8000a00 <get_bid_medium>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	429c      	cmp	r4, r3
 8000d90:	d113      	bne.n	8000dba <header_handler+0x19a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f8d3 400b 	ldr.w	r4, [r3, #11]
 8000d98:	f7ff fe50 	bl	8000a3c <get_bid_low>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	d10b      	bne.n	8000dba <header_handler+0x19a>
			transmit_ACK(header);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff2a 	bl	8000bfc <transmit_ACK>
			HAL_Delay(1000);
 8000da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dac:	f000 fa50 	bl	8001250 <HAL_Delay>

			waiting_read_down = 0;
 8000db0:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <header_handler+0x268>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
			return Read_Region_State;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e054      	b.n	8000e64 <header_handler+0x244>
		} else {
			// Send packet down to next board in the chain
			transmit_header(&huart3, header);
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	482b      	ldr	r0, [pc, #172]	; (8000e6c <header_handler+0x24c>)
 8000dbe:	f7ff fe5b 	bl	8000a78 <transmit_header>

			// Wait for ACK of the board
			num_bytes_down = 0;
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	; (8000e7c <header_handler+0x25c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	801a      	strh	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, (uint8_t *)&down_buffer, 15);
 8000dc8:	220f      	movs	r2, #15
 8000dca:	492d      	ldr	r1, [pc, #180]	; (8000e80 <header_handler+0x260>)
 8000dcc:	4827      	ldr	r0, [pc, #156]	; (8000e6c <header_handler+0x24c>)
 8000dce:	f001 fbbb 	bl	8002548 <HAL_UART_Receive_IT>

			waiting_read_down = 1;
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <header_handler+0x268>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
			return Idle_State;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e043      	b.n	8000e64 <header_handler+0x244>
		}
		break;

	case WRITE:
		// Wait to receive body
		num_bytes_up = 0;
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <header_handler+0x250>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&up_buffer, MAX_BUFFER_SIZE);
 8000de2:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000de6:	4923      	ldr	r1, [pc, #140]	; (8000e74 <header_handler+0x254>)
 8000de8:	4823      	ldr	r0, [pc, #140]	; (8000e78 <header_handler+0x258>)
 8000dea:	f001 fbad 	bl	8002548 <HAL_UART_Receive_IT>
		write_mem_en = 1;
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <header_handler+0x264>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]

		// Reply to packet
		if(header->bid_high == get_bid_high() && header->bid_medium == get_bid_medium() && header->bid_low == get_bid_low() ) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8d3 4003 	ldr.w	r4, [r3, #3]
 8000dfa:	f7ff fde3 	bl	80009c4 <get_bid_high>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	429c      	cmp	r4, r3
 8000e02:	d11b      	bne.n	8000e3c <header_handler+0x21c>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f8d3 4007 	ldr.w	r4, [r3, #7]
 8000e0a:	f7ff fdf9 	bl	8000a00 <get_bid_medium>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	429c      	cmp	r4, r3
 8000e12:	d113      	bne.n	8000e3c <header_handler+0x21c>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f8d3 400b 	ldr.w	r4, [r3, #11]
 8000e1a:	f7ff fe0f 	bl	8000a3c <get_bid_low>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	429c      	cmp	r4, r3
 8000e22:	d10b      	bne.n	8000e3c <header_handler+0x21c>
			transmit_ACK(header);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fee9 	bl	8000bfc <transmit_ACK>
			HAL_Delay(1000);
 8000e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2e:	f000 fa0f 	bl	8001250 <HAL_Delay>

			waiting_read_down = 0;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <header_handler+0x268>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
			return Read_Region_State;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e013      	b.n	8000e64 <header_handler+0x244>
		} else {
			// Send packet down to next board in the chain
			transmit_header(&huart3, header);
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	480b      	ldr	r0, [pc, #44]	; (8000e6c <header_handler+0x24c>)
 8000e40:	f7ff fe1a 	bl	8000a78 <transmit_header>

			// Wait for ACK of the board
			num_bytes_down = 0;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <header_handler+0x25c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	801a      	strh	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, (uint8_t *)&down_buffer, 15);
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <header_handler+0x260>)
 8000e4e:	4807      	ldr	r0, [pc, #28]	; (8000e6c <header_handler+0x24c>)
 8000e50:	f001 fb7a 	bl	8002548 <HAL_UART_Receive_IT>

			waiting_read_down = 1;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <header_handler+0x268>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
			return Idle_State;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e002      	b.n	8000e64 <header_handler+0x244>
		}
		break;

	case EXEC:
		return Idle_State;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <header_handler+0x244>
		break;
	default:
		return Idle_State;
 8000e62:	2300      	movs	r3, #0
		break;
	}
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	20000454 	.word	0x20000454
 8000e70:	2000044c 	.word	0x2000044c
 8000e74:	2000002c 	.word	0x2000002c
 8000e78:	20000498 	.word	0x20000498
 8000e7c:	2000044e 	.word	0x2000044e
 8000e80:	2000023c 	.word	0x2000023c
 8000e84:	20000451 	.word	0x20000451
 8000e88:	20000450 	.word	0x20000450

08000e8c <body_handler>:

SystemState body_handler(body_t *body)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	switch(body->type) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d004      	beq.n	8000ea6 <body_handler+0x1a>
 8000e9c:	2b06      	cmp	r3, #6
 8000e9e:	db22      	blt.n	8000ee6 <body_handler+0x5a>
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	dc20      	bgt.n	8000ee6 <body_handler+0x5a>
 8000ea4:	e01d      	b.n	8000ee2 <body_handler+0x56>
	case MEMORY:

		if(write_mem_en == 1) {
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <body_handler+0x64>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d103      	bne.n	8000eb6 <body_handler+0x2a>
			write_mem_values(body);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fe7f 	bl	8000bb2 <write_mem_values>
 8000eb4:	e003      	b.n	8000ebe <body_handler+0x32>
		} else {
			transmit_body(&huart1, body);
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <body_handler+0x68>)
 8000eba:	f7ff fe16 	bl	8000aea <transmit_body>
		}

		// Prepare to receive headers
		num_bytes_down = 0;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <body_handler+0x6c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t *)&down_buffer, 15);
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <body_handler+0x70>)
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <body_handler+0x74>)
 8000eca:	f001 fb3d 	bl	8002548 <HAL_UART_Receive_IT>

		num_bytes_up = 0;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <body_handler+0x78>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&up_buffer, 15);
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	490c      	ldr	r1, [pc, #48]	; (8000f08 <body_handler+0x7c>)
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <body_handler+0x68>)
 8000eda:	f001 fb35 	bl	8002548 <HAL_UART_Receive_IT>

		return Idle_State;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e002      	b.n	8000ee8 <body_handler+0x5c>

		break;
	case SENSORS:
	case CODE:
		return Idle_State;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <body_handler+0x5c>
		break;
	default:
		return Idle_State;
 8000ee6:	2300      	movs	r3, #0
	}
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000451 	.word	0x20000451
 8000ef4:	20000498 	.word	0x20000498
 8000ef8:	2000044e 	.word	0x2000044e
 8000efc:	2000023c 	.word	0x2000023c
 8000f00:	20000454 	.word	0x20000454
 8000f04:	2000044c 	.word	0x2000044c
 8000f08:	2000002c 	.word	0x2000002c

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_MspInit+0x58>)
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <HAL_MspInit+0x58>)
 8000f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f1c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_MspInit+0x58>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_MspInit+0x58>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_MspInit+0x58>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_MspInit+0x58>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_MspInit+0x58>)
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_MspInit+0x58>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6253      	str	r3, [r2, #36]	; 0x24
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_MspInit+0x58>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a37      	ldr	r2, [pc, #220]	; (8001064 <HAL_UART_MspInit+0xfc>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d131      	bne.n	8000fee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <HAL_UART_MspInit+0x100>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a36      	ldr	r2, [pc, #216]	; (8001068 <HAL_UART_MspInit+0x100>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6213      	str	r3, [r2, #32]
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <HAL_UART_MspInit+0x100>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <HAL_UART_MspInit+0x100>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a30      	ldr	r2, [pc, #192]	; (8001068 <HAL_UART_MspInit+0x100>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_UART_MspInit+0x100>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <HAL_UART_MspInit+0x104>)
 8000fd8:	f000 faaa 	bl	8001530 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2025      	movs	r0, #37	; 0x25
 8000fe2:	f000 fa2e 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fe6:	2025      	movs	r0, #37	; 0x25
 8000fe8:	f000 fa47 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fec:	e035      	b.n	800105a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <HAL_UART_MspInit+0x108>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d130      	bne.n	800105a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_UART_MspInit+0x100>)
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_UART_MspInit+0x100>)
 8000ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001002:	6253      	str	r3, [r2, #36]	; 0x24
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_UART_MspInit+0x100>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_UART_MspInit+0x100>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_UART_MspInit+0x100>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	61d3      	str	r3, [r2, #28]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_UART_MspInit+0x100>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001028:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103a:	2307      	movs	r3, #7
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	480b      	ldr	r0, [pc, #44]	; (8001074 <HAL_UART_MspInit+0x10c>)
 8001046:	f000 fa73 	bl	8001530 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2027      	movs	r0, #39	; 0x27
 8001050:	f000 f9f7 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001054:	2027      	movs	r0, #39	; 0x27
 8001056:	f000 fa10 	bl	800147a <HAL_NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40013800 	.word	0x40013800
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	40004800 	.word	0x40004800
 8001074:	40020400 	.word	0x40020400

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f8ab 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	num_bytes_up += 1;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <USART1_IRQHandler+0x1c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <USART1_IRQHandler+0x1c>)
 80010d6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <USART1_IRQHandler+0x20>)
 80010da:	f001 fa89 	bl	80025f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000044c 	.word	0x2000044c
 80010e8:	20000498 	.word	0x20000498

080010ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

	num_bytes_down += 1;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <USART3_IRQHandler+0x1c>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <USART3_IRQHandler+0x1c>)
 80010fa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <USART3_IRQHandler+0x20>)
 80010fe:	f001 fa77 	bl	80025f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000044e 	.word	0x2000044e
 800110c:	20000454 	.word	0x20000454

08001110 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <SystemInit+0x14>)
 8001116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111a:	609a      	str	r2, [r3, #8]
#endif
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001128:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112a:	e003      	b.n	8001134 <LoopCopyDataInit>

0800112c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800112e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001130:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001132:	3104      	adds	r1, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001138:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800113c:	d3f6      	bcc.n	800112c <CopyDataInit>
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001140:	e002      	b.n	8001148 <LoopFillZerobss>

08001142 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001144:	f842 3b04 	str.w	r3, [r2], #4

08001148 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800114a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800114c:	d3f9      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800114e:	f7ff ffdf 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f001 fdb5 	bl	8002cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001156:	f7ff f993 	bl	8000480 <main>
  bx lr
 800115a:	4770      	bx	lr
  ldr r3, =_sidata
 800115c:	08002d64 	.word	0x08002d64
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001164:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001168:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800116c:	200004dc 	.word	0x200004dc

08001170 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_IRQHandler>

08001172 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f955 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f80e 	bl	80011a4 <HAL_InitTick>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	e001      	b.n	8001198 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001194:	f7ff feba 	bl	8000f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001198:	79fb      	ldrb	r3, [r7, #7]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_InitTick+0x68>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d022      	beq.n	80011fe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_InitTick+0x6c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_InitTick+0x68>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f962 	bl	8001496 <HAL_SYSTICK_Config>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10f      	bne.n	80011f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	d809      	bhi.n	80011f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011de:	2200      	movs	r2, #0
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e6:	f000 f92c 	bl	8001442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_InitTick+0x70>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e007      	b.n	8001202 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e004      	b.n	8001202 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e001      	b.n	8001202 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000008 	.word	0x20000008
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x1c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x20>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4413      	add	r3, r2
 8001226:	4a03      	ldr	r2, [pc, #12]	; (8001234 <HAL_IncTick+0x1c>)
 8001228:	6013      	str	r3, [r2, #0]
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200004d8 	.word	0x200004d8
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <HAL_GetTick+0x10>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	200004d8 	.word	0x200004d8

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff fff0 	bl	800123c <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001268:	d004      	beq.n	8001274 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_Delay+0x40>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001274:	bf00      	nop
 8001276:	f7ff ffe1 	bl	800123c <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	429a      	cmp	r2, r3
 8001284:	d8f7      	bhi.n	8001276 <HAL_Delay+0x26>
  {
  }
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4906      	ldr	r1, [pc, #24]	; (800132c <__NVIC_EnableIRQ+0x34>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800140c:	f7ff ff90 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff2d 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff42 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff90 	bl	8001384 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5f 	bl	8001330 <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff35 	bl	80012f8 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d005      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2204      	movs	r2, #4
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e029      	b.n	8001526 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 020e 	bic.w	r2, r2, #14
 80014e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0201 	bic.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 021c 	and.w	r2, r3, #28
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	4798      	blx	r3
    }
  }
  return status;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001546:	e160      	b.n	800180a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8152 	beq.w	8001804 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d00b      	beq.n	8001580 <HAL_GPIO_Init+0x50>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001574:	2b11      	cmp	r3, #17
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b12      	cmp	r3, #18
 800157e:	d130      	bne.n	80015e2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80015b6:	2201      	movs	r2, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	f003 0201 	and.w	r2, r3, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0xf2>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b12      	cmp	r3, #18
 8001620:	d123      	bne.n	800166a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	6939      	ldr	r1, [r7, #16]
 8001666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0203 	and.w	r2, r3, #3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80ac 	beq.w	8001804 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ac:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_GPIO_Init+0x2f4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a5c      	ldr	r2, [pc, #368]	; (8001824 <HAL_GPIO_Init+0x2f4>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <HAL_GPIO_Init+0x2f4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_GPIO_Init+0x2f8>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a50      	ldr	r2, [pc, #320]	; (800182c <HAL_GPIO_Init+0x2fc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d025      	beq.n	800173c <HAL_GPIO_Init+0x20c>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a4f      	ldr	r2, [pc, #316]	; (8001830 <HAL_GPIO_Init+0x300>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d01f      	beq.n	8001738 <HAL_GPIO_Init+0x208>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a4e      	ldr	r2, [pc, #312]	; (8001834 <HAL_GPIO_Init+0x304>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d019      	beq.n	8001734 <HAL_GPIO_Init+0x204>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a4d      	ldr	r2, [pc, #308]	; (8001838 <HAL_GPIO_Init+0x308>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_GPIO_Init+0x200>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a4c      	ldr	r2, [pc, #304]	; (800183c <HAL_GPIO_Init+0x30c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_Init+0x1fc>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a4b      	ldr	r2, [pc, #300]	; (8001840 <HAL_GPIO_Init+0x310>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x1f8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a4a      	ldr	r2, [pc, #296]	; (8001844 <HAL_GPIO_Init+0x314>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_Init+0x1f4>
 8001720:	2306      	movs	r3, #6
 8001722:	e00c      	b.n	800173e <HAL_GPIO_Init+0x20e>
 8001724:	2307      	movs	r3, #7
 8001726:	e00a      	b.n	800173e <HAL_GPIO_Init+0x20e>
 8001728:	2305      	movs	r3, #5
 800172a:	e008      	b.n	800173e <HAL_GPIO_Init+0x20e>
 800172c:	2304      	movs	r3, #4
 800172e:	e006      	b.n	800173e <HAL_GPIO_Init+0x20e>
 8001730:	2303      	movs	r3, #3
 8001732:	e004      	b.n	800173e <HAL_GPIO_Init+0x20e>
 8001734:	2302      	movs	r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x20e>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_GPIO_Init+0x20e>
 800173c:	2300      	movs	r3, #0
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	f002 0203 	and.w	r2, r2, #3
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	4093      	lsls	r3, r2
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_GPIO_Init+0x2f8>)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175c:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <HAL_GPIO_Init+0x318>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001780:	4a31      	ldr	r2, [pc, #196]	; (8001848 <HAL_GPIO_Init+0x318>)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_GPIO_Init+0x318>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017aa:	4a27      	ldr	r2, [pc, #156]	; (8001848 <HAL_GPIO_Init+0x318>)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_GPIO_Init+0x318>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017d4:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_GPIO_Init+0x318>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_GPIO_Init+0x318>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <HAL_GPIO_Init+0x318>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	f47f ae97 	bne.w	8001548 <HAL_GPIO_Init+0x18>
  }
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40023800 	.word	0x40023800
 8001828:	40010000 	.word	0x40010000
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40021000 	.word	0x40021000
 8001840:	40021400 	.word	0x40021400
 8001844:	40021800 	.word	0x40021800
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e31d      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185e:	4b94      	ldr	r3, [pc, #592]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001868:	4b91      	ldr	r3, [pc, #580]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d07b      	beq.n	8001976 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b08      	cmp	r3, #8
 8001882:	d006      	beq.n	8001892 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d10f      	bne.n	80018aa <HAL_RCC_OscConfig+0x5e>
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d10b      	bne.n	80018aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001892:	4b87      	ldr	r3, [pc, #540]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d06a      	beq.n	8001974 <HAL_RCC_OscConfig+0x128>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d166      	bne.n	8001974 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e2f7      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x74>
 80018b2:	4b7f      	ldr	r3, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7e      	ldr	r2, [pc, #504]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e02d      	b.n	800191c <HAL_RCC_OscConfig+0xd0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x96>
 80018c8:	4b79      	ldr	r3, [pc, #484]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a78      	ldr	r2, [pc, #480]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0xd0>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0xb8>
 80018ea:	4b71      	ldr	r3, [pc, #452]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a70      	ldr	r2, [pc, #448]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6d      	ldr	r2, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0xd0>
 8001904:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a69      	ldr	r2, [pc, #420]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a66      	ldr	r2, [pc, #408]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fc8a 	bl	800123c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fc86 	bl	800123c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e2ad      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0xe0>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fc76 	bl	800123c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fc72 	bl	800123c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e299      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001966:	4b52      	ldr	r3, [pc, #328]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x108>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d05a      	beq.n	8001a38 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d005      	beq.n	8001994 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_OscConfig+0x176>
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d116      	bne.n	80019c2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001994:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_OscConfig+0x160>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e276      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	493d      	ldr	r1, [pc, #244]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c0:	e03a      	b.n	8001a38 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d020      	beq.n	8001a0c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ca:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <HAL_RCC_OscConfig+0x268>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc34 	bl	800123c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fc30 	bl	800123c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e257      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	492a      	ldr	r1, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]
 8001a0a:	e015      	b.n	8001a38 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <HAL_RCC_OscConfig+0x268>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fc13 	bl	800123c <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fc0f 	bl	800123c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e236      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80b8 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d170      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x218>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e21a      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1a      	ldr	r2, [r3, #32]
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d921      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fc1f 	bl	80022bc <RCC_SetFlashLatencyFromMSIRange>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e208      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4906      	ldr	r1, [pc, #24]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	061b      	lsls	r3, r3, #24
 8001aa8:	4901      	ldr	r1, [pc, #4]	; (8001ab0 <HAL_RCC_OscConfig+0x264>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
 8001aae:	e020      	b.n	8001af2 <HAL_RCC_OscConfig+0x2a6>
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab8:	4ba4      	ldr	r3, [pc, #656]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	49a1      	ldr	r1, [pc, #644]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aca:	4ba0      	ldr	r3, [pc, #640]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	061b      	lsls	r3, r3, #24
 8001ad8:	499c      	ldr	r1, [pc, #624]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fbea 	bl	80022bc <RCC_SetFlashLatencyFromMSIRange>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1d3      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	0b5b      	lsrs	r3, r3, #13
 8001af8:	3301      	adds	r3, #1
 8001afa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b02:	4a92      	ldr	r2, [pc, #584]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001b04:	6892      	ldr	r2, [r2, #8]
 8001b06:	0912      	lsrs	r2, r2, #4
 8001b08:	f002 020f 	and.w	r2, r2, #15
 8001b0c:	4990      	ldr	r1, [pc, #576]	; (8001d50 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	5c8a      	ldrb	r2, [r1, r2]
 8001b10:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b12:	4a90      	ldr	r2, [pc, #576]	; (8001d54 <HAL_RCC_OscConfig+0x508>)
 8001b14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b16:	4b90      	ldr	r3, [pc, #576]	; (8001d58 <HAL_RCC_OscConfig+0x50c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fb42 	bl	80011a4 <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d045      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	e1b5      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d029      	beq.n	8001b8a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <HAL_RCC_OscConfig+0x510>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fb7e 	bl	800123c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b44:	f7ff fb7a 	bl	800123c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1a1      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b56:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b62:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4977      	ldr	r1, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b74:	4b75      	ldr	r3, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	4972      	ldr	r1, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b8a:	4b74      	ldr	r3, [pc, #464]	; (8001d5c <HAL_RCC_OscConfig+0x510>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb54 	bl	800123c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b98:	f7ff fb50 	bl	800123c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e177      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001baa:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d030      	beq.n	8001c24 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d016      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bca:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <HAL_RCC_OscConfig+0x514>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fb34 	bl	800123c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fb30 	bl	800123c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e157      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bea:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x38c>
 8001bf6:	e015      	b.n	8001c24 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x514>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fb1d 	bl	800123c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c06:	f7ff fb19 	bl	800123c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e140      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f0      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80b5 	beq.w	8001d9c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	4a41      	ldr	r2, [pc, #260]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6253      	str	r3, [r2, #36]	; 0x24
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x518>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6a:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <HAL_RCC_OscConfig+0x518>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a3d      	ldr	r2, [pc, #244]	; (8001d64 <HAL_RCC_OscConfig+0x518>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fae1 	bl	800123c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff fadd 	bl	800123c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e104      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <HAL_RCC_OscConfig+0x518>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x466>
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca8:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cae:	6353      	str	r3, [r2, #52]	; 0x34
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_OscConfig+0x4c2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x488>
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc4:	6353      	str	r3, [r2, #52]	; 0x34
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cca:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cd0:	6353      	str	r3, [r2, #52]	; 0x34
 8001cd2:	e01c      	b.n	8001d0e <HAL_RCC_OscConfig+0x4c2>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4aa>
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6353      	str	r3, [r2, #52]	; 0x34
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x4c2>
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d00:	6353      	str	r3, [r2, #52]	; 0x34
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d0c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fa91 	bl	800123c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fa8d 	bl	800123c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0b2      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RCC_OscConfig+0x4d2>
 8001d40:	e023      	b.n	8001d8a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fa7b 	bl	800123c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d48:	e019      	b.n	8001d7e <HAL_RCC_OscConfig+0x532>
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08002d3c 	.word	0x08002d3c
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004
 8001d5c:	42470020 	.word	0x42470020
 8001d60:	42470680 	.word	0x42470680
 8001d64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff fa68 	bl	800123c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e08d      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d7e:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d079      	beq.n	8001e98 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d056      	beq.n	8001e58 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d13b      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_RCC_OscConfig+0x65c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fa40 	bl	800123c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff fa3c 	bl	800123c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e063      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	4319      	orrs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	430b      	orrs	r3, r1
 8001df6:	492b      	ldr	r1, [pc, #172]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_RCC_OscConfig+0x65c>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fa1b 	bl	800123c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fa17 	bl	800123c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e03e      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x5be>
 8001e28:	e036      	b.n	8001e98 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <HAL_RCC_OscConfig+0x65c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa04 	bl	800123c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fa00 	bl	800123c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e027      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x5ec>
 8001e56:	e01f      	b.n	8001e98 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e01a      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_RCC_OscConfig+0x658>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d10d      	bne.n	8001e94 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d106      	bne.n	8001e94 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	42470060 	.word	0x42470060

08001eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e11a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d919      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x34>
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a89      	ldr	r2, [pc, #548]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b87      	ldr	r3, [pc, #540]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 0201 	bic.w	r2, r3, #1
 8001ee8:	4985      	ldr	r1, [pc, #532]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef0:	4b83      	ldr	r3, [pc, #524]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0f9      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0e:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	497a      	ldr	r1, [pc, #488]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808e 	beq.w	800204a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f36:	4b73      	ldr	r3, [pc, #460]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d121      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0d7      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d115      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0cb      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f66:	4b67      	ldr	r3, [pc, #412]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0bf      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0b7      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	495c      	ldr	r1, [pc, #368]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7ff f950 	bl	800123c <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d112      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7ff f948 	bl	800123c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e09b      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fbe:	4b51      	ldr	r3, [pc, #324]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xfc>
 8001fca:	e03e      	b.n	800204a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d112      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd6:	f7ff f931 	bl	800123c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e084      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	4b45      	ldr	r3, [pc, #276]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b0c      	cmp	r3, #12
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x12a>
 8001ff8:	e027      	b.n	800204a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d11d      	bne.n	800203e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7ff f91a 	bl	800123c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e06d      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b04      	cmp	r3, #4
 8002024:	d1ee      	bne.n	8002004 <HAL_RCC_ClockConfig+0x158>
 8002026:	e010      	b.n	800204a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7ff f908 	bl	800123c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e05b      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ee      	bne.n	8002028 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d219      	bcs.n	800208c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCC_ClockConfig+0x1be>
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a27      	ldr	r2, [pc, #156]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0201 	bic.w	r2, r3, #1
 8002072:	4923      	ldr	r1, [pc, #140]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_RCC_ClockConfig+0x254>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e034      	b.n	80020f6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4917      	ldr	r1, [pc, #92]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	490f      	ldr	r1, [pc, #60]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f823 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_RCC_ClockConfig+0x258>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x25c>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	fa21 f303 	lsr.w	r3, r1, r3
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x260>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x264>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f85a 	bl	80011a4 <HAL_InitTick>
 80020f0:	4603      	mov	r3, r0
 80020f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80020f4:	7afb      	ldrb	r3, [r7, #11]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00
 8002104:	40023800 	.word	0x40023800
 8002108:	08002d3c 	.word	0x08002d3c
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800211a:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_RCC_GetSysClockFreq+0x134>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b08      	cmp	r3, #8
 8002128:	d006      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x24>
 800212a:	2b0c      	cmp	r3, #12
 800212c:	d007      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x2a>
 800212e:	2b04      	cmp	r3, #4
 8002130:	d176      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0x10c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002132:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_RCC_GetSysClockFreq+0x138>)
 8002134:	613b      	str	r3, [r7, #16]
      break;
 8002136:	e081      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002138:	4b45      	ldr	r3, [pc, #276]	; (8002250 <HAL_RCC_GetSysClockFreq+0x13c>)
 800213a:	613b      	str	r3, [r7, #16]
      break;
 800213c:	e07e      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	4a43      	ldr	r2, [pc, #268]	; (8002254 <HAL_RCC_GetSysClockFreq+0x140>)
 8002148:	5cd3      	ldrb	r3, [r2, r3]
 800214a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	0d9b      	lsrs	r3, r3, #22
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	3301      	adds	r3, #1
 8002156:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002158:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_GetSysClockFreq+0x134>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d019      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f04f 0400 	mov.w	r4, #0
 800216a:	4a39      	ldr	r2, [pc, #228]	; (8002250 <HAL_RCC_GetSysClockFreq+0x13c>)
 800216c:	fb02 f104 	mul.w	r1, r2, r4
 8002170:	2200      	movs	r2, #0
 8002172:	fb02 f203 	mul.w	r2, r2, r3
 8002176:	440a      	add	r2, r1
 8002178:	4935      	ldr	r1, [pc, #212]	; (8002250 <HAL_RCC_GetSysClockFreq+0x13c>)
 800217a:	fba3 0101 	umull	r0, r1, r3, r1
 800217e:	1853      	adds	r3, r2, r1
 8002180:	4619      	mov	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f04f 0400 	mov.w	r4, #0
 8002188:	461a      	mov	r2, r3
 800218a:	4623      	mov	r3, r4
 800218c:	f7fd fff6 	bl	800017c <__aeabi_uldivmod>
 8002190:	4603      	mov	r3, r0
 8002192:	460c      	mov	r4, r1
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e040      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x106>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	461d      	mov	r5, r3
 800219c:	f04f 0600 	mov.w	r6, #0
 80021a0:	4629      	mov	r1, r5
 80021a2:	4632      	mov	r2, r6
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	f04f 0400 	mov.w	r4, #0
 80021ac:	0154      	lsls	r4, r2, #5
 80021ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021b2:	014b      	lsls	r3, r1, #5
 80021b4:	4619      	mov	r1, r3
 80021b6:	4622      	mov	r2, r4
 80021b8:	1b49      	subs	r1, r1, r5
 80021ba:	eb62 0206 	sbc.w	r2, r2, r6
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	f04f 0400 	mov.w	r4, #0
 80021c6:	0194      	lsls	r4, r2, #6
 80021c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021cc:	018b      	lsls	r3, r1, #6
 80021ce:	1a5b      	subs	r3, r3, r1
 80021d0:	eb64 0402 	sbc.w	r4, r4, r2
 80021d4:	f04f 0100 	mov.w	r1, #0
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	00e2      	lsls	r2, r4, #3
 80021de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021e2:	00d9      	lsls	r1, r3, #3
 80021e4:	460b      	mov	r3, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	195b      	adds	r3, r3, r5
 80021ea:	eb44 0406 	adc.w	r4, r4, r6
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	02a2      	lsls	r2, r4, #10
 80021f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021fc:	0299      	lsls	r1, r3, #10
 80021fe:	460b      	mov	r3, r1
 8002200:	4614      	mov	r4, r2
 8002202:	4618      	mov	r0, r3
 8002204:	4621      	mov	r1, r4
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f04f 0400 	mov.w	r4, #0
 800220c:	461a      	mov	r2, r3
 800220e:	4623      	mov	r3, r4
 8002210:	f7fd ffb4 	bl	800017c <__aeabi_uldivmod>
 8002214:	4603      	mov	r3, r0
 8002216:	460c      	mov	r4, r1
 8002218:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	613b      	str	r3, [r7, #16]
      break;
 800221e:	e00d      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x128>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_GetSysClockFreq+0x134>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0b5b      	lsrs	r3, r3, #13
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	613b      	str	r3, [r7, #16]
      break;
 800223a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223c:	693b      	ldr	r3, [r7, #16]
}
 800223e:	4618      	mov	r0, r3
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	00f42400 	.word	0x00f42400
 8002250:	016e3600 	.word	0x016e3600
 8002254:	08002d30 	.word	0x08002d30

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_RCC_GetHCLKFreq+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002270:	f7ff fff2 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002274:	4601      	mov	r1, r0
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4a03      	ldr	r2, [pc, #12]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002282:	5cd3      	ldrb	r3, [r2, r3]
 8002284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	08002d4c 	.word	0x08002d4c

08002294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002298:	f7ff ffde 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 800229c:	4601      	mov	r1, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	0adb      	lsrs	r3, r3, #11
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08002d4c 	.word	0x08002d4c

080022bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d12c      	bne.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e016      	b.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6253      	str	r3, [r2, #36]	; 0x24
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800230c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002318:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002320:	d105      	bne.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002328:	d101      	bne.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800232a:	2301      	movs	r3, #1
 800232c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 0201 	bic.w	r2, r3, #1
 8002348:	490b      	ldr	r1, [pc, #44]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000
 8002378:	40023c00 	.word	0x40023c00

0800237c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e03f      	b.n	800240e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fde0 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fb99 	bl	8002af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b088      	sub	sp, #32
 800241a:	af02      	add	r7, sp, #8
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b20      	cmp	r3, #32
 8002434:	f040 8083 	bne.w	800253e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_UART_Transmit+0x2e>
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e07b      	b.n	8002540 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_UART_Transmit+0x40>
 8002452:	2302      	movs	r3, #2
 8002454:	e074      	b.n	8002540 <HAL_UART_Transmit+0x12a>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2221      	movs	r2, #33	; 0x21
 8002468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800246c:	f7fe fee6 	bl	800123c <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	88fa      	ldrh	r2, [r7, #6]
 8002476:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	88fa      	ldrh	r2, [r7, #6]
 800247c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002486:	e042      	b.n	800250e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249e:	d122      	bne.n	80024e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f9bb 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e042      	b.n	8002540 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3302      	adds	r3, #2
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	e017      	b.n	800250e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3301      	adds	r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	e013      	b.n	800250e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f998 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e01f      	b.n	8002540 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	60ba      	str	r2, [r7, #8]
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1b7      	bne.n	8002488 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2200      	movs	r2, #0
 8002520:	2140      	movs	r1, #64	; 0x40
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f97f 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e006      	b.n	8002540 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	d140      	bne.n	80025e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_UART_Receive_IT+0x26>
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e039      	b.n	80025e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_UART_Receive_IT+0x38>
 800257c:	2302      	movs	r3, #2
 800257e:	e032      	b.n	80025e6 <HAL_UART_Receive_IT+0x9e>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	88fa      	ldrh	r2, [r7, #6]
 8002598:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2222      	movs	r2, #34	; 0x22
 80025a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10d      	bne.n	8002642 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_UART_IRQHandler+0x52>
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f9db 	bl	80029f6 <UART_Receive_IT>
      return;
 8002640:	e0d1      	b.n	80027e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80b0 	beq.w	80027aa <HAL_UART_IRQHandler+0x1ba>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_UART_IRQHandler+0x70>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a5 	beq.w	80027aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_UART_IRQHandler+0x90>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_UART_IRQHandler+0xb0>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	f043 0202 	orr.w	r2, r3, #2
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_UART_IRQHandler+0xd0>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	f043 0204 	orr.w	r2, r3, #4
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00f      	beq.n	80026ea <HAL_UART_IRQHandler+0xfa>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <HAL_UART_IRQHandler+0xee>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	f043 0208 	orr.w	r2, r3, #8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d078      	beq.n	80027e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_UART_IRQHandler+0x11c>
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f975 	bl	80029f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_UART_IRQHandler+0x144>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d031      	beq.n	8002798 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f8c0 	bl	80028ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	d123      	bne.n	8002790 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002756:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	4a21      	ldr	r2, [pc, #132]	; (80027ec <HAL_UART_IRQHandler+0x1fc>)
 8002766:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fe9e 	bl	80014ae <HAL_DMA_Abort_IT>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002782:	4610      	mov	r0, r2
 8002784:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002786:	e00e      	b.n	80027a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f843 	bl	8002814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278e:	e00a      	b.n	80027a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f83f 	bl	8002814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002796:	e006      	b.n	80027a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f83b 	bl	8002814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80027a4:	e01e      	b.n	80027e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a6:	bf00      	nop
    return;
 80027a8:	e01c      	b.n	80027e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_UART_IRQHandler+0x1d6>
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8ac 	bl	800291c <UART_Transmit_IT>
    return;
 80027c4:	e00f      	b.n	80027e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_UART_IRQHandler+0x1f6>
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8f3 	bl	80029c6 <UART_EndTransmit_IT>
    return;
 80027e0:	bf00      	nop
 80027e2:	e000      	b.n	80027e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80027e4:	bf00      	nop
  }
}
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	080028f5 	.word	0x080028f5

080027f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002836:	e02c      	b.n	8002892 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800283e:	d028      	beq.n	8002892 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <UART_WaitOnFlagUntilTimeout+0x30>
 8002846:	f7fe fcf9 	bl	800123c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	429a      	cmp	r2, r3
 8002854:	d21d      	bcs.n	8002892 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002864:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e00f      	b.n	80028b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4013      	ands	r3, r2
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d0c3      	beq.n	8002838 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff ff80 	bl	8002814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b21      	cmp	r3, #33	; 0x21
 800292e:	d144      	bne.n	80029ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002938:	d11a      	bne.n	8002970 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800294e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	621a      	str	r2, [r3, #32]
 8002962:	e00e      	b.n	8002982 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	621a      	str	r2, [r3, #32]
 800296e:	e008      	b.n	8002982 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	1c59      	adds	r1, r3, #1
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6211      	str	r1, [r2, #32]
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29b      	uxth	r3, r3
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4619      	mov	r1, r3
 8002990:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ff02 	bl	80027f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b22      	cmp	r3, #34	; 0x22
 8002a08:	d171      	bne.n	8002aee <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a12:	d123      	bne.n	8002a5c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10e      	bne.n	8002a40 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a3e:	e029      	b.n	8002a94 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28
 8002a5a:	e01b      	b.n	8002a94 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6858      	ldr	r0, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6291      	str	r1, [r2, #40]	; 0x28
 8002a74:	b2c2      	uxtb	r2, r0
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e00c      	b.n	8002a94 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	1c58      	adds	r0, r3, #1
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	6288      	str	r0, [r1, #40]	; 0x28
 8002a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d120      	bne.n	8002aea <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0220 	bic.w	r2, r2, #32
 8002ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff fe8e 	bl	8002802 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e002      	b.n	8002af0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b38:	f023 030c 	bic.w	r3, r3, #12
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a55      	ldr	r2, [pc, #340]	; (8002cb8 <UART_SetConfig+0x1c0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d103      	bne.n	8002b6e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b66:	f7ff fb95 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	e002      	b.n	8002b74 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b6e:	f7ff fb7d 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8002b72:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7c:	d14c      	bne.n	8002c18 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	009a      	lsls	r2, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	0119      	lsls	r1, r3, #4
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009a      	lsls	r2, r3, #2
 8002ba8:	441a      	add	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb4:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002bb6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2064      	movs	r0, #100	; 0x64
 8002bbe:	fb00 f303 	mul.w	r3, r0, r3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	3332      	adds	r3, #50	; 0x32
 8002bc8:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bd6:	4419      	add	r1, r3
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009a      	lsls	r2, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002bf0:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2064      	movs	r0, #100	; 0x64
 8002bf8:	fb00 f303 	mul.w	r3, r0, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	3332      	adds	r3, #50	; 0x32
 8002c02:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 0207 	and.w	r2, r3, #7
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	440a      	add	r2, r1
 8002c14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c16:	e04a      	b.n	8002cae <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	441a      	add	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	0119      	lsls	r1, r3, #4
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009a      	lsls	r2, r3, #2
 8002c42:	441a      	add	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c50:	fba3 0302 	umull	r0, r3, r3, r2
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	2064      	movs	r0, #100	; 0x64
 8002c58:	fb00 f303 	mul.w	r3, r0, r3
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	3332      	adds	r3, #50	; 0x32
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6e:	4419      	add	r1, r3
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	009a      	lsls	r2, r3, #2
 8002c7a:	441a      	add	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c88:	fba3 0302 	umull	r0, r3, r3, r2
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	2064      	movs	r0, #100	; 0x64
 8002c90:	fb00 f303 	mul.w	r3, r0, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	3332      	adds	r3, #50	; 0x32
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <UART_SetConfig+0x1c4>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	f003 020f 	and.w	r2, r3, #15
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	440a      	add	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	51eb851f 	.word	0x51eb851f

08002cc0 <__libc_init_array>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	2500      	movs	r5, #0
 8002cc4:	4e0c      	ldr	r6, [pc, #48]	; (8002cf8 <__libc_init_array+0x38>)
 8002cc6:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <__libc_init_array+0x3c>)
 8002cc8:	1ba4      	subs	r4, r4, r6
 8002cca:	10a4      	asrs	r4, r4, #2
 8002ccc:	42a5      	cmp	r5, r4
 8002cce:	d109      	bne.n	8002ce4 <__libc_init_array+0x24>
 8002cd0:	f000 f822 	bl	8002d18 <_init>
 8002cd4:	2500      	movs	r5, #0
 8002cd6:	4e0a      	ldr	r6, [pc, #40]	; (8002d00 <__libc_init_array+0x40>)
 8002cd8:	4c0a      	ldr	r4, [pc, #40]	; (8002d04 <__libc_init_array+0x44>)
 8002cda:	1ba4      	subs	r4, r4, r6
 8002cdc:	10a4      	asrs	r4, r4, #2
 8002cde:	42a5      	cmp	r5, r4
 8002ce0:	d105      	bne.n	8002cee <__libc_init_array+0x2e>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ce8:	4798      	blx	r3
 8002cea:	3501      	adds	r5, #1
 8002cec:	e7ee      	b.n	8002ccc <__libc_init_array+0xc>
 8002cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cf2:	4798      	blx	r3
 8002cf4:	3501      	adds	r5, #1
 8002cf6:	e7f2      	b.n	8002cde <__libc_init_array+0x1e>
 8002cf8:	08002d5c 	.word	0x08002d5c
 8002cfc:	08002d5c 	.word	0x08002d5c
 8002d00:	08002d5c 	.word	0x08002d5c
 8002d04:	08002d60 	.word	0x08002d60

08002d08 <memset>:
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4402      	add	r2, r0
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <memset+0xa>
 8002d10:	4770      	bx	lr
 8002d12:	f803 1b01 	strb.w	r1, [r3], #1
 8002d16:	e7f9      	b.n	8002d0c <memset+0x4>

08002d18 <_init>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr

08002d24 <_fini>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr
